Problem :

Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.

Example 1:

Input:
N = 5
Arr[] = {1,2,3,-2,5}
Output:
9
Explanation:
Max subarray sum is 9
of elements (1, 2, 3, -2, 5) which 
is a contiguous subarray.

Example 2:

Input:
N = 4
Arr[] = {-1,-2,-3,-4}
Output:
-1
Explanation:
Max subarray sum is -1 
of element (-1)


Solution :

------------ Kadane's Algorithm (O(n) time complexity and O(1) space complexity) -------------- 

n=int(input())
arr=list(map(int,input().split()))
maxi=min(arr)
max_till_here=0
for i in range(0,n):
    max_till_here+=arr[i]
    if max_till_here>maxi:
        maxi=max_till_here
    if max_till_here<0:
        max_till_here=0
print(maxi)

---------------- O(n cube) time complexity -------------------

n=int(input())
arr=list(map(int,input().split()))
maxi=min(arr)
for i in range(0,n):
    for j in range(i,n):
        s=0
        for k in range(i,j+1):
            s+=arr[k]
        if s>maxi:
            maxi=s
print(maxi)
