Problem :

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all
the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.



Solution :
------------------ Using sorting,  TC: O(N*log(N)), SC: O(N) ---------------------------
intervals = [[1,3],[2,6],[8,10],[15,18]]
stack=[]
intervals.sort()
stack.append(intervals[0])
for i in intervals[1:]:
    print(stack)
    if stack[-1][0]<=i[0]<=stack[-1][-1]:
        stack[-1][-1]=max(stack[-1][-1],i[-1])
    else:
        stack.append(i)
print(stack)

------------------- Using sorting but without space, TC: O(N*log(N)), SC: O(1) ---------------------------
intervals = [[1,3],[2,3],[2,6],[8,10],[15,18]]
intervals.sort()
index=0
for i in range(1,len(intervals)):
    if intervals[index][1]>=intervals[i][0]:
        intervals[index][1]=max(intervals[index][1],intervals[i][1])
    else:
        index+=1
        intervals[index]=intervals[i]
    
print(intervals[:index+1])
        
