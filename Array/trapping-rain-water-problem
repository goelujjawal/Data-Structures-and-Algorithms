Problem:

Given an array arr[] of N non-negative integers representing the height of blocks.
If width of each block is 1, compute how much water can be trapped between the blocks during the rainy season. 
 

Example 1:
Input:
N = 6
arr[] = {3,0,0,2,0,4}
Output:
10

Example 2:
Input:
N = 4
arr[] = {7,4,0,9}
Output:
10
Explanation:
Water trapped by above 
block of height 4 is 3 units and above 
block of height 0 is 7 units. So, the 
total unit of water trapped is 10 units.

Example 3:
Input:
N = 3
arr[] = {6,9,9}
Output:
0
Explanation:
No water will be trapped.


Solution :

-----------------------Method 1---------------------
n=int(input())
a=list(map(int,input().split()))[:n]
s=0
for i in range(1,len(a)-1):
    max1=max(a[:i])
    max2=max(a[i+1:])
    mini=min(max1,max2)
    if mini-a[i]>0:
        s+=mini-a[i]
print(s)

---------------------Method 2 (Time Complexity - O(n) & Space Complexity - O(n)--------------
n=int(input())
a=list(map(int,input().split()))[:n]
s=0
l=[0]*n
r=[0]*n
ma_l=l[0]=a[0]
ma_r=r[n-1]=a[n-1]
for i in range(1,len(a)):
    if a[i]>ma_l:
        ma_l=a[i]
    l[i]=ma_l
for i in range(len(a)-2,-1,-1):
    if a[i]>ma_r:
        ma_r=a[i]
    r[i]=ma_r
for i in range(0,n):
    s+=min(l[i],r[i])-a[i]
print(s)

