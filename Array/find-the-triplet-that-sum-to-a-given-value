Problem :

Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.


Example 1:
Input:
n = 6, X = 13
arr[] = [1 4 45 6 10 8]
Output:
1
Explanation:
The triplet {1, 4, 8} in 
the array sums up to 13.

Example 2:
Input:
n = 5, X = 10
arr[] = [1 2 4 3 6]
Output:
1
Explanation:
The triplet {1, 3, 6} in 
the array sums up to 10.

Solution :
--------------------------- TC - O(n**3), SC - O(1) -----------------

n = 6
x = 13
a = [1,4,45,6,10,8]
ans=0
for i in range(0,n-2):
    for j in range(i,n-1):
        for k in range(j,n):
            if a[i]+a[j]+a[k]==x:
                ans=1
print(ans)

-------------------------- O(n**2), SC - O(1) ------------------------
n = 6
x = 13
a = [1,4,45,6,10,8]
a.sort()
ans=0
for i in range(0,n-2):
    l=i+1
    r=n-1
    while l<r:
        if a[i]+a[l]+a[r]==x:
            ans=1
            break
        elif a[i]+a[l]+a[r]>x:
            r-=1
        else:
            l+=1
print(ans)
