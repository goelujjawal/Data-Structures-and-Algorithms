Problem :

Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.


Example 1:
Input:
n = 6, X = 13
arr[] = [1 4 45 6 10 8]
Output:
1
Explanation:
The triplet {1, 4, 8} in 
the array sums up to 13.

Example 2:
Input:
n = 5, X = 10
arr[] = [1 2 4 3 6]
Output:
1
Explanation:
The triplet {1, 3, 6} in 
the array sums up to 10.

Solution :

n=int(input())
x=int(input())
arr=list(map(int,input().split()))
arr.sort()
flag=0
for i in range(0,n):
    low=i+1
    high=n-1
    y=x-arr[i]
    while low<high:
        if arr[low]+arr[high]>y:
            high-=1
        elif arr[low]+arr[high]<y:
            low+=1
        elif arr[low]+arr[high]==y:
            flag=1
            break
if flag==1:
    print(1)
else:
    print(0)
        
