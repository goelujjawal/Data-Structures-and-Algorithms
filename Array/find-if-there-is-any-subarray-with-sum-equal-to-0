Problem :

Given an array of positive and negative numbers. Find if there is a subarray (of size at-least one) with 0 sum.

Example 1:
Input:
5
4 2 -3 1 6
Output: 
Yes
Explanation: 
2, -3, 1 is the subarray 
with sum 0.

Example 2:
Input:
5
4 2 0 1 6
Output: 
Yes
Explanation: 
0 is one of the element 
in the array so there exist a 
subarray with sum 0.


Solution :

------------- Time complexity - O(n*2) , Space complexity -O(1)  --------------

arr=list(map(int,input().split()))
flag=0
for i in range(0,len(arr)):
    s=0
    for j in range(i,len(arr)):
        s=s+arr[j]
        if s==0:
            flag=1
            break
    if flag==1:
        break
if flag==1:
    print("Yes")
else:
    print("No")

-------------- Time complexity - O(n) , Space complexity -O(n)  --------------


arr=list(map(int,input().split()))
flag=0
if 0 in arr:
    print("Yes")
else:
    s=0
    for i in range(0,len(arr)):
        s=s+arr[i]
        arr[i]=s
    if 0 in arr or len(arr)!=len(set(arr)):
        flag=1
    
    if flag==1:
        print("Yes")
    else:
        print("No")
