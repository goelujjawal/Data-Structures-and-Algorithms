------------------- Top Down Approach (TC-O(n), SC-O(n)) ---------------------------
def fibo(n):
    dp=[-1 for i in range(n+1)]
    if n<=1:
        return n   
    if dp[n]!=-1:
        return dp[n]
    dp[n]=fibo(n-1)+fibo(n-2)
    return dp[n]  
print(fibo(5))

------------------- Botom up approach (TC-O(n), SC-O(n)) -----------------------------
def fibo(n):
    dp=[0,1]
    for i in range(2,n+1):
        dp.append(dp[i-1]+dp[i-2])
    return dp[n]
print(fibo(5))

------------------- Space optimization (TC-O(n), SC-O(1)) -----------------------------
def fibo(n):
    prev1=0
    prev2=1
    if n==0:
        return prev1
    if n==1:
        return prev2
    for i in range(2,n+1):
        curr=prev1+prev2
        prev1=prev2
        prev2=curr
    return curr
print(fibo(5))
