Problem :

https://practice.geeksforgeeks.org/problems/depth-first-traversal-for-a-graph/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

Solution :

-----------------------------------------gfg--------------------------------------------
class Solution:
    def dfs(self,node):
        self.visited.append(node)
        for i in adj[node]:
            if i not in self.visited:    
                self.dfs(i)
        
    def dfsOfGraph(self, V, adj):
        # code here
        self.visited=[]
        self.dfs(0)
        return self.visited
        
--------------------------------------scratch--------------------------------------------------   
 
def dfs(g,node,visited=[]):
    print(node)
    visited.append(node)
    for i in g[node]:
        if i not in visited:
            dfs(g,i,visited)
        
        
ip=[[0,2],[0,3],[0,1],[2,4]]
g={}
n=5
for i in range(n):
    g[i]=[]
    
for (u,v) in ip:
    g[u].append(v)
    g[v].append(u)
    
print(dfs(g,0))
