Problem :

Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Example 1:
Input: head = [1,2,3,4,5]
Output: 3
Explanation: The middle node of the list is node 3.

Example 2:
Input: head = [1,2,3,4,5,6]
Output: 4
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.


Solution :

--------------------------- TC - O(n) ----------------------
class Solution:
    def getlength(head):
        length=0
        while head!=None:
            length+=1
            head=head.next
        return length   
    def middleNode(self, head):
        l=Solution.getlength(head)
        ans=(l//2)
        temp=head
        c=0
        while c<ans:
            temp=temp.next
            c+=1
        return temp
      
------------------------- 
class Solution:
    def middleNode(self, head):
        if head==None or head.next==None:
            return head
        if head.next.next==None:
            return head.next
        slow=head
        fast=head.next
        while fast!=None:
            slow=slow.next
            fast=fast.next
            if fast!=None:
                fast=fast.next
        return slow
