Problem :

Given a singly linked list of size N of integers. The task is to check if the given linked list is palindrome or not.

Example 1:
Input:
N = 3
value[] = {1,2,1}
Output: 1
Explanation: The given linked list is 1 2 1 , which is a palindrome and Hence, the output is 1.

Example 2:
Input:
N = 4
value[] = {1,2,3,4}
Output: 0
Explanation: The given linked list is 1 2 3 4 , which is not a palindrome and Hence, the output is 0.


Solution :

-----------------------------------------TC-O(n) , SC-O(n) -----------------------------------------
class Solution:
    def isPalindrome(self, head):
        a=[]
        temp=head
        while temp!=None:
            a.append(temp.data)
            temp=temp.next
        s=0
        e=len(a)-1
        while s<=e:
            if a[s]!=a[e]:
                return 0
            s+=1
            e-=1
        return 1
        

-----------------------------------------TC-O(n) , SC-O(1) -----------------------------------------
class Solution:
    def findmiddle(head):
        if head==None or head.next==None:
            return head
        if head.next.next==None:
            return head
        slow=head
        fast=head.next
        while fast!=None and fast.next!=None:
            slow=slow.next
            fast=fast.next.next
        return slow
                
    def rev(head):
        if head==None or head.next==None:
            return head
        prev=None
        curr=head
        while curr!=None:
            forward=curr.next
            curr.next=prev
            prev=curr
            curr=forward
        return prev
            
    def isPalindrome(self, head):
        if head.next==None:
            return True
        middle=Solution.findmiddle(head)
        temp=middle.next
        middle.next=Solution.rev(temp)
        head1=head
        head2=middle.next
        while head2!=None:
            if head2.data!=head1.data:
                return False
            head1=head1.next
            head2=head2.next
        temp=middle.next
        middle.next=Solution.rev(temp)
        return True
