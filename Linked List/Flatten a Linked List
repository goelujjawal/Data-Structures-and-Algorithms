Problem :

Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
Note: The flattened list will be printed using the bottom pointer instead of next pointer. For more clearity have a look at the printList() function in the driver code.

 

Example 1:
Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45
Output:  5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation:
The resultant linked lists has every 
node in a single level.
(Note: | represents the bottom pointer.)
 

Example 2:
Input:
5 -> 10 -> 19 -> 28
|          |                
7          22   
|          |                 
8          50 
|                           
30              
Output: 5->7->8->10->19->22->28->30->50
Explanation:
The resultant linked lists has every
node in a single level.

(Note: | represents the bottom pointer.)


Solution :

def merge(left,right):
    if left==None:
        return right
    if right==None:
        return left
    ans=Node(-1)
    temp=ans
    while left!=None and right!=None:
        if left.data<right.data:
            temp.bottom=left
            temp=left
            left=left.bottom
        else:
            temp.bottom=right
            temp=right
            right=right.bottom
    while left!=None:
        temp.bottom=left
        temp=left
        left=left.bottom
    while right!=None:
        temp.bottom=right
        temp=right
        right=right.bottom
    ans=ans.bottom
    return ans
        
def flatten(root):
    if root==None or root.next==None:
        return root
    return merge(root,flatten(root.next))
