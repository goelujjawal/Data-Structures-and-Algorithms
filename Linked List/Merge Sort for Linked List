Problem :

Given Pointer/Reference to the head of the linked list, the task is to Sort the given linked list using Merge Sort.
Note: If the length of linked list is odd, then the extra node should go in the first list while splitting.

Example 1:

Input:
N = 5
value[]  = {3,5,2,4,1}
Output: 1 2 3 4 5
Explanation: After sorting the given linked list, the resultant matrix will be 1->2->3->4->5.

Example 2:
Input:
N = 3
value[]  = {9,15,0}
Output: 0 9 15
Explanation: After sorting the given linked list , resultant will be 0->9->15.


Solution :

class Solution:
    def findhead(head):
        slow=head
        fast=head
        while(fast.next!=None and fast.next.next!=None):
            slow=slow.next
            fast=fast.next.next
        return slow
        
    def merge(left,right):
        if left==None:
            return right
        if right==None:
            return left
        ans=Node(-1)
        temp=ans
        while left!=None and right!=None:
            if left.data<right.data:
                temp.next=left
                temp=left
                left=left.next
            else:
                temp.next=right
                temp=right
                right=right.next
        while left!=None:
            temp.next=left
            temp=left
            left=left.next
        while right!=None:
            temp.next=right
            temp=right
            right=right.next
        ans=ans.next
        return ans
        
    def mergeSort(self,head):
        if head==None or head.next==None:
            return head
        mid=Solution.findhead(head)
        left=head
        right=mid.next
        mid.next=None
        left=self.mergeSort(left)
        right=self.mergeSort(right)
        result=Solution.merge(left,right)
        return result
