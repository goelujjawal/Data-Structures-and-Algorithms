Problem :

Given a linked list of N nodes such that it may contain a loop.

A loop here means that the last node of the link list is connected to the node at position X. If the link list does not have any loop, X=0.

Remove the loop from the linked list, if it is present.  


Example 1:

Input:
N = 3
value[] = {1,3,4}
X = 2
Output: 1
Explanation: The link list looks like
1 -> 3 -> 4
     ^    |
     |____|    
A loop is present. If you remove it 
successfully, the answer will be 1. 

Example 2:

Input:
N = 4
value[] = {1,8,3,4}
X = 0
Output: 1
Explanation: The Linked list does not 
contains any loop. 

Example 3:

Input:
N = 4
value[] = {1,2,3,4}
X = 1
Output: 1
Explanation: The link list looks like 
1 -> 2 -> 3 -> 4
     |_________|
A loop is present. 
If you remove it successfully, 
the answer will be 1. 


Solution :

class Solution:
    def detectandfindfirstnode(head):
        if head==None or head.next==None:
            return None
        slow=head
        fast=head
        while fast!=None or slow==fast:
            slow=slow.next                                                   
            fast=fast.next
            if fast!=None:
                fast=fast.next
            if slow==fast:
                break
        if slow!=fast:
            return None
        if slow==None or fast==None:
            return None
        slow=head
        while slow!=fast:
            slow=slow.next
            fast=fast.next
        return slow
        
        
    def removeLoop(self, head):
        if head==None:
            return None
        startofloop=Solution.detectandfindfirstnode(head)
        if startofloop==None:
            return head
        temp=startofloop
        while temp.next!=startofloop:
            temp=temp.next
        temp.next=None
        return head
