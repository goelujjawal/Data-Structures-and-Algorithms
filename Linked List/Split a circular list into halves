Problem :

Given a Cirular Linked List of size N, split it into two halves circular lists.
If there are odd number of nodes in the given circular linked list then out of the resulting two halved lists, first list should have one node more than the second list.
The resultant lists should also be circular lists and not linear lists.

Example 1:
Input:
Circular LinkedList: 1->5->7
Output:
1 5
7

Example 2:
Input:
Circular LinkedList: 2->6->1->5
Output:
2 6
1 5


Solution :

class Solution:
    def splitList(self, head, head1, head2):
        slow=head
        fast=head.next
        head1=head
        while fast!=head and fast.next!=head:
            slow=slow.next
            fast=fast.next.next
        head2=slow.next
        slow.next=head
        temp=head2
        while temp.next!=head:
            temp=temp.next
        temp.next=head2
        return head1,head2
