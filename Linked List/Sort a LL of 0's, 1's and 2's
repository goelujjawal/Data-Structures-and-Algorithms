Problem :

Given a linked list of N nodes where nodes can contain values 0s, 1s, and 2s only. 
The task is to segregate 0s, 1s, and 2s linked list such that all zeros segregate to head side, 2s at the end of the linked list, and 1s in the mid of 0s and 2s.

Example 1:
Input:
N = 8
value[] = {1,2,2,1,2,0,2,2}
Output: 0 1 1 2 2 2 2 2
Explanation: All the 0s are segregated to the left end of the linked list, 2s to the right end of the list, and 1s in between.

Example 2:
Input:
N = 4
value[] = {2,2,0,1}
Output: 0 1 2 2
Explanation: After arranging all the 0s,1s and 2s in the given format, the output will be 0 1 2 2.


Solution :

class Solution:
    def segregate(self, head):
        #code here
        c1=0
        c2=0
        c3=0
        temp=head
        while temp!=None:
            if temp.data==0:
                c1+=1
            elif temp.data==1:
                c2+=1
            elif temp.data==2:
                c3+=1
            temp=temp.next
        temp=head
        while temp!=None:
            if c1!=0:
                temp.data=0
                c1-=1
            elif c2!=0:
                temp.data=1
                c2-=1
            elif c3!=0:
                temp.data=2
                c3-=1
            temp=temp.next
        return head
