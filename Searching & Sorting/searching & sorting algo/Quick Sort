def partition(arr,s,e):
    pivot=arr[s]
    c=0
    for i in range(s+1,e+1):
        if arr[i]<pivot:
            c+=1
    pivotindex=s+c
    temp=arr[s]
    arr[s]=arr[pivotindex]
    arr[pivotindex]=temp
    
    i=s
    j=e
    while i<pivotindex and j>pivotindex:
        while arr[i]<=pivot:
            i+=1
        while arr[j]>pivot:
            j-=1
        if i<pivotindex and j>pivotindex:
            temp=arr[i]
            arr[i]=arr[j]
            arr[j]=temp
            i+=1
            j-=1
    return pivotindex

def quick_sort(arr,s,e):
    if s>=e:
        return
    p=partition(arr,s,e)
    quick_sort(arr,s,p-1)
    quick_sort(arr,p+1,e)

arr = [ 10, 7, 8, 9, 1, 5]
quick_sort(arr, 0, len(arr) - 1)
print(arr)


---------- TC ----------
Avg Case and best case - O(n log n)
Worst case - O(n**2)
---------SC - O(n)----------

Quick Sort is not a stable algorithm
Quicksort is an in-place sorting algorithm. 

Quick Sort is preferred over MergeSort for sorting Arrays
MergeSort is preferred over QuickSort for Linked Lists 
