Problem :

Given an array of n distinct elements. Find the minimum number of swaps required to sort the array in strictly increasing order.

Example 1
Input:
nums = {2, 8, 5, 4}
Output:
1
Explaination:
swap 8 with 4.

Example 2:
Input:
nums = {10, 19, 6, 3, 5}
Output:
2
Explaination:
swap 10 with 3 and swap 19 with 5.



Solution :
---------------------TC-O(nlogn) , SC-O(n)-------------------
a=[10,19,6,3,5]
d={}
for i in range(0,len(a)):
    d[a[i]]=i
c=0
acopy=list(a)
acopy.sort()
i=0
while i<len(a):
    if acopy[i]==a[i]:
        i+=1
    else:
        pos=d[acopy[i]]
        acopy[pos],acopy[i]=acopy[i],acopy[pos]
        c+=1
print(c)
    
