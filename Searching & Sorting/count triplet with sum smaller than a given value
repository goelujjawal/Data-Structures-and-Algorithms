Problem :

Given an array arr[] of distinct integers of size N and a value sum,
the task is to find the count of triplets (i, j, k), having (i<j<k) with the sum of (arr[i] + arr[j] + arr[k]) smaller than the given value sum.

Example 1:
Input: N = 4, sum = 2
arr[] = {-2, 0, 1, 3}
Output:  2
Explanation: Below are triplets with 
sum less than 2 (-2, 0, 1) and (-2, 0, 3). 
 
Example 2:
Input: N = 5, sum = 12
arr[] = {5, 1, 3, 4, 7}
Output: 4
Explanation: Below are triplets with 
sum less than 12 (1, 3, 4), (1, 3, 5), 
(1, 3, 7) and (1, 4, 5).


Solution :
---------------- TC-O(n**3)-------------------------
n=5
s=12
a=[5,1,3,4,7]
a.sort()
c=0
for i in range(0,n-2):
    for j in range(i+1,n-1):
        for k in range(j+1,n):
            if a[i]+a[j]+a[k]<s:
                c+=1
print(c) 
    
-------------------- TC- O(n**2), SC-O(1)--------------
n=5
s=12
a=[5,1,3,4,7]
a.sort()
c=0
for i in range(0,n-2):
    j=i+1
    k=n-1
    while j<k:
        if a[i]+a[j]+a[k]<s:   
            c+=(k-j)
            j+=1
        else:
            k-=1
print(c) 
    
    
