Problem :

Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.
You must not use any built-in exponent function or operator.
For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.

Example 1:
Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.

Example 2:
Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.
 
 
 Solution :
 
n=int(input())
def sqrt(n):
    start=0
    end=n-1
    mid=start+((end-start)//2)
    ans=0
    while start<=end:
        if mid*mid>n:
            end=mid-1
        if mid*mid<n:
            ans=mid
            start=mid+1
        if mid*mid==n:
            return mid-1
        mid=start+((end-start)//2)
    return ans
print(sqrt(n))
