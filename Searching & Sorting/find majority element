Problem:

Given an array A of N elements. Find the majority element in the array.
A majority element in an array A of size N is an element that appears more than N/2 times in the array.
 
Example 1:
Input:
N = 3 
A[] = {1,2,3} 
Output:
-1
Explanation:
Since, each element in {1,2,3} appears only once so there is no majority element.

Example 2:
Input:
N = 5 
A[] = {3,1,3,3,2} 
Output:
3
Explanation:
Since, 3 is present morethan N/2 times, so it is the majority element.



Solution :

------------- TC- O(n*n) , SC - O(1)------------
n=int(input())
arr=list(map(int,input().split()))[:n]
ans=-1
for i in arr:
    if arr.count(i)>n/2:
        ans=i
print(ans)
        
------------ TC - O(N) , SC - O(1) -----------

N=int(input())
A=list(map(int,input().split()))[:n]
def majorityElement(A, N):
        count=0
        ele=-1
        for i in range(0,len(A)):
            if count==0:
                ele=A[i]
            if A[i]==ele:
                count+=1
            else:
                count-=1
        count=0
        for i in range(0,len(A)):
            if A[i]==ele:
                count+=1
        if count>N/2:
            return ele
        else:
            return -1
print(majorityElement(A,N))
