Problem :

Given a Binary Tree, find Right view of it. Right view of a Binary Tree is set of nodes visible when tree is viewed from right side.
Right view of following tree is 1 3 7 8.

          1
       /     \
     2        3
   /   \      /    \
  4     5   6    7
    \
     8

Example 1:
Input:
       1
    /    \
   3      2
Output: 1 2

Example 2:
Input:
     10
    /   \
  20     30
 /   \
40  60 
Output: 10 30 60


Solution :
--------------------------------------------- Using recursion -------------------------------------------------
class Solution:
    def getRightView(self,root,ans,level,d):
        if root is None:
            return
        if level not in d:
            d[level]=[root.data]
            ans.append(root.data)
        self.getRightView(root.right,ans,level+1,d)
        self.getRightView(root.left,ans,level+1,d)
    
    def rightView(self,root):
        d={}
        ans=[]
        self.getRightView(root,ans,0,d)
        return ans

----------------------------------------------- Using Level order traversal --------------------------------
def rightView(self,root):
        if root==None:
            return
        ans=[]
        q=deque()
        q.append(root)
        while len(q)>0:
            n=len(q)
            while n>0:
                n-=1
                temp=q.popleft()
                if n==0:
                    ans.append(temp.data)
                if temp.left!=None:
                    q.append(temp.left)
                if temp.right!=None:
                    q.append(temp.right)
        return ans
