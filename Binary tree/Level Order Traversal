Problem : 
Given a binary tree, find its level order traversal.
Level order traversal of a tree is breadth-first traversal for the tree.

Solution :

--------------------- Using Recursion (TC - O(n**2), SC - O(n))------------------------------
class Node:
    def __init__(self, key):
        self.data = key
        self.left = None
        self.right = None
 
def printLevelOrder(root):
    h = height(root)
    for i in range(1, h+1):
        printCurrentLevel(root, i)
 
def printCurrentLevel(root, level):
    if root is None:
        return
    if level == 1:
        print(root.data, end=" ")
    elif level > 1:
        printCurrentLevel(root.left, level-1)
        printCurrentLevel(root.right, level-1)
         
def height(node):
    if node is None:
        return 0
    else:
        lheight = height(node.left)
        rheight = height(node.right)
        if lheight > rheight:
            return lheight+1
        else:
            return rheight+1
 
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
 
printLevelOrder(root)

Output : 1 2 3 4 5

--------------------- Using Queue (TC - O(n), SC - O(n)) ------------------------------
class Node:
    def __init__(self, key):
        self.data = key
        self.left = None
        self.right = None
 
def printLevelOrder(root):
    queue=[]
    queue.append(root)
    while queue:
        print(queue[0].data,end=' ')
        curr=queue.pop(0)
        if curr.left:
            queue.append(curr.left)
        if curr.right:
            queue.append(curr.right)
            
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
 
printLevelOrder(root)
        
