Problem :

Given a binary tree of size N. Your task is to complete the function sumOfLongRootToLeafPath(), that find the sum of all nodes on the longest path from root to
leaf node. If two or more paths compete for the longest path, then the path having maximum sum of nodes is being considered.

Example 1:
Input: 
        4        
       / \       
      2   5      
     / \ / \     
    7  1 2  3    
      /
     6
Output: 13
Explanation:
        4        
       / \       
      2   5      
     / \ / \     
    7  1 2  3 
      /
     6

The highlighted nodes (4, 2, 1, 6) above are part of the longest root to leaf path having sum = (4 + 2 + 1 + 6) = 13

Example 2:
Input: 
          1
        /   \
       2     3
      / \   / \
     4   5 6   7
Output: 11



Solution :

class Solution:
    def solve(self,root,Sum,Len,maxsum,maxlen):
        if root==None:
            if maxlen[0]<Len:
                maxlen[0]=Len
                maxsum[0]=Sum
            elif maxlen[0]==Len:
                if Sum>maxsum[0]:
                    maxsum[0]=Sum
            return
        Sum=Sum+root.data
        self.solve(root.left,Sum,Len+1,maxsum,maxlen)
        self.solve(root.right,Sum,Len+1,maxsum,maxlen)
              
    def sumOfLongRootToLeafPath(self,root):
        #code here
        maxsum=[0]
        maxlen=[0]
        self.solve(root,0,0,maxsum,maxlen)
        return maxsum[0]
