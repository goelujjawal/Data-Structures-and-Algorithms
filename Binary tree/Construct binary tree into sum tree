Problem :

Given a Binary Tree of size N , where each node can have positive or negative values. Convert this to a tree where each node contains the sum of the left and right sub trees of the original tree. The values of leaf nodes are changed to 0.

Example 1:

Input:
             10
          /      \
        -2        6
       /   \     /  \
     8     -4   7    5

Output:
            20
          /    \
        4        12
       /  \     /  \
     0     0   0    0

Explanation:

           (4-2+12+6)
          /           \
      (8-4)          (7+5)
       /   \         /  \
      0     0       0    0


Solution :

class Solution:
    def solve(self,node):
        if node is None:
            return 0
        a=self.solve(node.left)
        b=self.solve(node.right)
        c=node.data
        node.data=a+b
        return a+b+c
    def toSumTree(self, root) :
        ans=self.solve(root)
        return ans
