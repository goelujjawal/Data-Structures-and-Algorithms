Problem :

Given a Binary Tree, return Left view of it. Left view of a Binary Tree is set of nodes visible when tree is visited from Left side. 
The task is to complete the function leftView(), which accepts root of the tree as argument.

Left view of following tree is 1 2 4 8.

          1
       /     \
     2        3
   /     \    / \
  4     5   6    7
   \
     8   

Example 1:
Input:
   1
 /  \
3    2
Output: 1 3


Solution :

------------------------------------- Using recursion ---------------------------------
def getLeftView(root,ans,level,d):
    if root is None:
        return
    if level not in d:
        d[level]=[root.data]
        ans.append(root.data)
    getLeftView(root.left,ans,level+1,d)
    getLeftView(root.right,ans,level+1,d)
    
def LeftView(root):
    d={}
    ans=[]
    getLeftView(root,ans,0,d)
    return ans

---------------------------------------- Using Level order traversal ---------------------
def LeftView(root):
    if root==None:
        return
    ans=[]
    q=[]
    q.append(root)
    while len(q)>0:
        for i in range(1,len(q)+1):
            temp=q[0]
            q.pop(0)
            if i==1:
                ans.append(temp.data)
            if temp.left!=None:
                q.append(temp.left)
            if temp.right!=None:
                q.append(temp.right)
    return ans
