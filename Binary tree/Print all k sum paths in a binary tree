Problem :

Given a binary tree and an integer K. Find the number of paths in the tree which have their sum equal to K.
A path may start from any node and end at any node in the downward direction.


Example 1:

Input:      
Tree = 
          1                               
        /   \                          
       2     3
K = 3
Output: 2
Explanation:
Path 1 : 1 + 2 = 3
Path 2 : only leaf node 3
Example 2:

Input: 
Tree = 
           1
        /     \
      3        -1
    /   \     /   \
   2     1   4     5                        
        /   / \     \                    
       1   1   2     6    
K = 5                    
Output: 8
Explanation:
The following paths sum to K.  
3 2 
3 1 1 
1 3 1 
4 1 
1 -1 4 1 
-1 4 2 
5 
1 -1 5 



Solution :

class Solution:
    def getCount(self,root,k,count,path):
        if root==None:
            return
        path.append(root.data)
        self.getCount(root.left,k,count,path)
        self.getCount(root.right,k,count,path)
        Sum=0
        for i in range(len(path)-1,-1,-1):
            Sum+=path[i]
            if Sum==k:
                count[0]+=1
        path.pop()            
    
    def sumK(self,root,k):
        path=[]
        count=[0]
        self.getCount(root,k,count,path)
        return count[0]
