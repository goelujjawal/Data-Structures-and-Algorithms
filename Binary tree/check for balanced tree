Problem :

Given a binary tree, find if it is height balanced or not. 
A tree is height balanced if difference between heights of left and right subtrees is not more than one for all nodes of tree. 

A height balanced tree
        1
     /     \
   10      39
  /
5

An unbalanced tree
        1
     /    
   10   
  /
5

Example 1:

Input:
      1
    /
   2
    \
     3 
Output: 0
Explanation: The max difference in height
of left subtree and right subtree is 2,
which is greater than 1. Hence unbalanced
Example 2:

Input:
       10
     /   \
    20   30 
  /   \
 40   60
Output: 1
Explanation: The max difference in height
of left subtree and right subtree is 1.
Hence balanced. 


Solution :

--------------------TC (O(n**2)  , SC (O(n))-------------------------------
class Solution:
    
    def height(self,node):
        if node==None:
            return 0
        else:
            lheight=self.height(node.left)
            rheight=self.height(node.right)
            ans=max(lheight,rheight)+1
            return ans
    
    def isBalanced(self,root):
        if root==None:
            return True
        left=self.isBalanced(root.left)
        right=self.isBalanced(root.right)
        if left is True and right is True and (abs(self.height(root.left) - self.height(root.right)) <= 1):
            return True
        return False

--------------------TC (O(n)  , SC (O(n))-------------------------------
class Solution:
    
    def isBalanced(self,root):
        if root==None:
            return True
        left=self.isBalanced(root.left)
        if left == 0:
            return 0
        right=self.isBalanced(root.right)
        if right== 0:
            return 0
        if (abs(left-right)>1):
            return 0
        else:
            return max(left,right)+1
