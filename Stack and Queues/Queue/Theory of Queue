A queue is defined as a linear data structure that is open at both ends and the operations are performed in First In First Out (FIFO) order.

We define a queue to be a list in which all additions to the list are made at one end, and all deletions from the list are made at the other end.
The element which is first pushed into the order, the operation is first performed on that.

A Queue is like a line waiting to purchase tickets, where the first person in line is the first person served. (i.e. First come first serve).

Characteristics of Queue:

Queue can handle multiple data.
We can access both ends.
They are fast and flexible.

Types of Queues: 

1. Simple Queue:
Simple queue also known as a linear queue is the most basic version of a queue.
Here, insertion of an element i.e. the Enqueue operation takes place at the rear end and removal of an element i.e. the Dequeue operation takes place at the front end.

2. Circular Queue: 
In a circular queue, the element of the queue act as a circular ring. 
The working of a circular queue is similar to the linear queue except for the fact that the last element is connected to the first element. 
Its advantage is that the memory is utilized in a better way. This is because if there is an empty space
i.e. if no element is present at a certain position in the queue, then an element can be easily added at that position.

3. Priority Queue:
This queue is a special type of queue. Its specialty is that it arranges the elements in a queue based on some priority. 
The priority can be something where the element with the highest value has the priority so it creates a queue with decreasing order of values.
The priority can also be such that the element with the lowest value gets the highest priority so in turn it creates a queue with increasing order of values.

4. Dequeue:
Dequeue is also known as Double Ended Queue. As the name suggests double ended, it means that an element can be inserted or removed from both ends of the queue,
unlike the other queues in which it can be done only from one end. Because of this property, it may not obey the First In First Out property. 

Applications of Queue: 
Queue is used when things donâ€™t have to be processed immediately, but have to be processed in First In First Out order like Breadth First Search. 
This property of Queue makes it also useful in following kind of scenarios.

When a resource is shared among multiple consumers. Examples include CPU scheduling, Disk Scheduling. 
When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes. Examples include IO Buffers, pipes, file IO, etc. 
Queue can be used as an essential component in various other data structures.
 
Queue Representation:

Like stacks, Queues can also be represented in an array: In this representation, the Queue is implemented using the array. Variables used in this case are :
Queue: the name of the array storing queue elements.
Front: the index where the first element is stored in the array representing the queue.
Rear: the index where the last element is stored in an array representing the queue.

