Problem :

A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person.
Here M[i][i] will always be 0.
Note: Follow 0 based indexing.
 
Example 1:
Input:
N = 3
M[][] = {{0 1 0},
         {0 0 0}, 
         {0 1 0}}
Output: 1
Explanation: 0th and 2nd person both know 1. Therefore, 1 is the celebrity. 

Example 2:
Input:
N = 2
M[][] = {{0 1},
         {1 0}}
Output: -1
Explanation: The two people at the party both know each other. None of them is a celebrity.


Solution :

------------- TC - O(n**2) , SC - O(n) -----------------
def celebrity(m,n):
    inp=[0]*n
    out=[0]*n
    for i in range(n):
        for j in range(n):
            if m[i][j]==1:
                inp[j]+=1
                out[i]+=1
    for i in range(n):
        if inp[i]==n-1 and out[i]==0:
            return i
    return -1

n = 4
m = [[0, 0, 1, 0],
     [0, 0, 1, 0],
     [0, 0, 0, 0],
     [0, 0, 1, 0]]
print(celebrity(m, n))


------------- TC - O(n) , SC - O(1) -----------------
class Solution:
    def celebrity(self, M, n):
        s=[]
        for i in range(n):
            s.append(i)
        while len(s)>1:
            a=s[-1]
            s.pop()
            b=s[-1]
            s.pop()
            if M[a][b]==1:
                s.append(b)
            else:
                s.append(a)
        ans=s[-1]
        zerocount=0
        for i in range(n):
            if M[ans][i]==0:
                zerocount+=1
            
        if zerocount!=n:
            return -1
        
        onecount=0
        for i in range(n):
            if M[i][ans]==1:
                onecount+=1
            
        if onecount!=n-1:
            return -1
        return ans
