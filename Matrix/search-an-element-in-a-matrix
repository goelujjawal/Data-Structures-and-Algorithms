Problem :

Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Example 1 :
Input: matrix = [[1,3,5,7],
                 [10,11,16,20],
                 [23,30,34,60]],
       target = 3
Output: true

Example 2 :
Input: matrix = [[1,3,5,7],
                [10,11,16,20],
                [23,30,34,60]],
       target = 13
Output: false


Solution :
---------------- Brute Force approach O(n*2) ------------------------------
r = int(input())
c = int(input())
matrix=[]
for i in range(r):
    a=[]
    for i in range(c):
        a.append(int(input()))
    matrix.append(a)
target=int(input())
flag=0
for i in range(0,r):
    for j in range(0,c):
        if matrix[i][j]==target:
            flag=1
            break
if flag==1:
    print("true")
else:
    print("false")
    
    
------------------- Efficient approach (Binary Search) (O(logn))-------------------
r = int(input())
c = int(input())
matrix=[]
for i in range(r):
    a=[]
    for i in range(c):
        a.append(int(input()))
    matrix.append(a)
target=int(input())
low=0
high=r*c-1
flag=0
while low<=high:
    mid=(low+high)//2
    if matrix[mid//c][mid%c]==target:
        flag=1
        break
    elif matrix[mid//c][mid%c]>target:
        high=mid-1
    else:
        low=mid+1
if flag==1:
    print("true")
else:
    print("false")
    
