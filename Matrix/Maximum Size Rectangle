Problem :

Given a binary matrix M of size n X m. Find the maximum area of a rectangle formed only of 1s in the given matrix.

Example 1:
Input:
n = 4, m = 4
M[][] = {{0 1 1 0},
         {1 1 1 1},
         {1 1 1 1},
         {1 1 0 0}}
Output: 8
Explanation: For the above test case the
matrix will look like
0 1 1 0
1 1 1 1
1 1 1 1
1 1 0 0
the max size rectangle is 
1 1 1 1
1 1 1 1
and area is 4 *2 = 8.


Solution :

class Solution:
    
    def nextSmallerElement(arr,n):
        ans=[0]*n
        stack=[]
        for i in range(len(arr)-1,-1,-1):
            while len(stack)>0 and arr[stack[-1]]>=arr[i]:
                stack.pop()
            if len(stack)==0:
                ans[i]=-1
            else:
                ans[i]=stack[-1]
            stack.append(i)
        return ans 
        
    def prevSmallerElement(arr,n):
        ans=[0]*n
        stack=[]
        for i in range(len(arr)):
            while len(stack)>0 and arr[stack[-1]]>=arr[i]:
                stack.pop()
            if len(stack)==0:
                ans[i]=-1
            else:
                ans[i]=stack[-1]
            stack.append(i)
        return ans 
    
    def getMaxArea(histogram,n):
        nextindex=Solution.nextSmallerElement(histogram,n)
        previndex=Solution.prevSmallerElement(histogram,n)
        area=min(histogram)
        for i in range(n):
            l=histogram[i]
            if nextindex[i]==-1:
                nextindex[i]=n
            b=nextindex[i]-previndex[i]-1
            newArea=l*b
            area=max(area,newArea)
        return area

    def maxArea(self,M, n, m):
        area=Solution.getMaxArea(M[0],m)
        for i in range(1,n):
            for j in range(0,m):
                if M[i][j]!=0:
                    M[i][j]=M[i][j]+M[i-1][j]
                else:
                    M[i][j]=0
            area=max(area,Solution.getMaxArea(M[i],m))
        return area
